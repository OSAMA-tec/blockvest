Certainly! I'll guide you through the process of dockerizing your NestJS project step by step, including how to update the Docker image when you make changes.

Step 1: Create a Dockerfile

In the root of your project, create a file named `Dockerfile` with the following content:

```dockerfile
# Use the official Node.js 14 image as a parent image
FROM node:14

# Set the working directory
WORKDIR /usr/src/app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of your app's source code
COPY . .

# Build your app
RUN npm run build

# Expose the port your app runs on
EXPOSE 3000

# Start the app
CMD ["npm", "run", "start:prod"]
```

Step 2: Create a .dockerignore file

Create a `.dockerignore` file in the root of your project to exclude unnecessary files:

```
node_modules
npm-debug.log
dist
```

Step 3: Build the Docker image

Open a terminal in your project root and run:

```bash
docker build -t my-nestjs-app .
```

This command builds a Docker image named `my-nestjs-app` based on your Dockerfile.

Step 4: Run the Docker container

After the build is complete, run your container:

```bash
docker run -p 3000:3000 my-nestjs-app
```

This command runs your app in a container and maps port 3000 of the container to port 3000 on your host machine.

Step 5: Stopping the container

To stop the running container, first find its ID:

```bash
docker ps
```

Then stop it using:

```bash
docker stop <container_id>
```

Updating the Docker image after changes:

When you make changes to your code, you need to rebuild the Docker image and run a new container. Here's the process:

1. Make your code changes.

2. Rebuild the Docker image:
   ```bash
   docker build -t my-nestjs-app .
   ```

3. Stop the old container if it's running:
   ```bash
   docker stop <container_id>
   ```

4. Run a new container with the updated image:
   ```bash
   docker run -p 3000:3000 my-nestjs-app
   ```

Additional tips:

1. Use Docker Compose: For more complex setups (e.g., when you need to run multiple services like your app and a database), consider using Docker Compose. Create a `docker-compose.yml` file in your project root:

```yaml
version: '3'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
```

Then you can use:
- `docker-compose up --build` to build and start your services
- `docker-compose down` to stop them

2. Development mode: For development, you might want to use volume mounting to reflect code changes without rebuilding. Update your Dockerfile:

```dockerfile
...
CMD ["npm", "run", "start:dev"]
```

And run with:

```bash
docker run -p 3000:3000 -v $(pwd):/usr/src/app my-nestjs-app
```

This mounts your current directory to the container, allowing changes to be reflected immediately.

3. Environment variables: Make sure to pass your environment variables to the container. You can do this in the `docker run` command or in your `docker-compose.yml` file.

Remember to adjust the commands and configurations based on your specific project structure and requirements.